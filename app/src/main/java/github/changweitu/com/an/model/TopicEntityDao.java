package github.changweitu.com.an.model;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TOPIC_ENTITY".
*/
public class TopicEntityDao extends AbstractDao<TopicEntity, Long> {

    public static final String TABLENAME = "TOPIC_ENTITY";

    /**
     * Properties of entity TopicEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Created_at = new Property(2, java.util.Date.class, "created_at", false, "CREATED_AT");
        public final static Property Updated_at = new Property(3, java.util.Date.class, "updated_at", false, "UPDATED_AT");
        public final static Property Replied_at = new Property(4, java.util.Date.class, "replied_at", false, "REPLIED_AT");
        public final static Property Replies_count = new Property(5, int.class, "replies_count", false, "REPLIES_COUNT");
        public final static Property Node_name = new Property(6, String.class, "node_name", false, "NODE_NAME");
        public final static Property Node_id = new Property(7, int.class, "node_id", false, "NODE_ID");
        public final static Property Last_reply_user_id = new Property(8, int.class, "last_reply_user_id", false, "LAST_REPLY_USER_ID");
        public final static Property Last_reply_user_login = new Property(9, String.class, "last_reply_user_login", false, "LAST_REPLY_USER_LOGIN");
        public final static Property Deleted = new Property(10, boolean.class, "deleted", false, "DELETED");
        public final static Property Excellent = new Property(11, boolean.class, "excellent", false, "EXCELLENT");
        public final static Property Likes_count = new Property(12, int.class, "likes_count", false, "LIKES_COUNT");
        public final static Property UserId = new Property(13, long.class, "userId", false, "USER_ID");
        public final static Property Page = new Property(14, int.class, "page", false, "PAGE");
    };

    private DaoSession daoSession;

    private Query<TopicEntity> userEntity_TopicsQuery;

    public TopicEntityDao(DaoConfig config) {
        super(config);
    }
    
    public TopicEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TOPIC_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"CREATED_AT\" INTEGER," + // 2: created_at
                "\"UPDATED_AT\" INTEGER," + // 3: updated_at
                "\"REPLIED_AT\" INTEGER," + // 4: replied_at
                "\"REPLIES_COUNT\" INTEGER NOT NULL ," + // 5: replies_count
                "\"NODE_NAME\" TEXT," + // 6: node_name
                "\"NODE_ID\" INTEGER NOT NULL ," + // 7: node_id
                "\"LAST_REPLY_USER_ID\" INTEGER NOT NULL ," + // 8: last_reply_user_id
                "\"LAST_REPLY_USER_LOGIN\" TEXT," + // 9: last_reply_user_login
                "\"DELETED\" INTEGER NOT NULL ," + // 10: deleted
                "\"EXCELLENT\" INTEGER NOT NULL ," + // 11: excellent
                "\"LIKES_COUNT\" INTEGER NOT NULL ," + // 12: likes_count
                "\"USER_ID\" INTEGER NOT NULL ," + // 13: userId
                "\"PAGE\" INTEGER NOT NULL );"); // 14: page
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TOPIC_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TopicEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        java.util.Date created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindLong(3, created_at.getTime());
        }
 
        java.util.Date updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindLong(4, updated_at.getTime());
        }
 
        java.util.Date replied_at = entity.getReplied_at();
        if (replied_at != null) {
            stmt.bindLong(5, replied_at.getTime());
        }
        stmt.bindLong(6, entity.getReplies_count());
 
        String node_name = entity.getNode_name();
        if (node_name != null) {
            stmt.bindString(7, node_name);
        }
        stmt.bindLong(8, entity.getNode_id());
        stmt.bindLong(9, entity.getLast_reply_user_id());
 
        String last_reply_user_login = entity.getLast_reply_user_login();
        if (last_reply_user_login != null) {
            stmt.bindString(10, last_reply_user_login);
        }
        stmt.bindLong(11, entity.getDeleted() ? 1L: 0L);
        stmt.bindLong(12, entity.getExcellent() ? 1L: 0L);
        stmt.bindLong(13, entity.getLikes_count());
        stmt.bindLong(14, entity.getUserId());
        stmt.bindLong(15, entity.getPage());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TopicEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        java.util.Date created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindLong(3, created_at.getTime());
        }
 
        java.util.Date updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindLong(4, updated_at.getTime());
        }
 
        java.util.Date replied_at = entity.getReplied_at();
        if (replied_at != null) {
            stmt.bindLong(5, replied_at.getTime());
        }
        stmt.bindLong(6, entity.getReplies_count());
 
        String node_name = entity.getNode_name();
        if (node_name != null) {
            stmt.bindString(7, node_name);
        }
        stmt.bindLong(8, entity.getNode_id());
        stmt.bindLong(9, entity.getLast_reply_user_id());
 
        String last_reply_user_login = entity.getLast_reply_user_login();
        if (last_reply_user_login != null) {
            stmt.bindString(10, last_reply_user_login);
        }
        stmt.bindLong(11, entity.getDeleted() ? 1L: 0L);
        stmt.bindLong(12, entity.getExcellent() ? 1L: 0L);
        stmt.bindLong(13, entity.getLikes_count());
        stmt.bindLong(14, entity.getUserId());
        stmt.bindLong(15, entity.getPage());
    }

    @Override
    protected final void attachEntity(TopicEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public TopicEntity readEntity(Cursor cursor, int offset) {
        TopicEntity entity = new TopicEntity( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // created_at
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // updated_at
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // replied_at
            cursor.getInt(offset + 5), // replies_count
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // node_name
            cursor.getInt(offset + 7), // node_id
            cursor.getInt(offset + 8), // last_reply_user_id
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // last_reply_user_login
            cursor.getShort(offset + 10) != 0, // deleted
            cursor.getShort(offset + 11) != 0, // excellent
            cursor.getInt(offset + 12), // likes_count
            cursor.getLong(offset + 13), // userId
            cursor.getInt(offset + 14) // page
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TopicEntity entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreated_at(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setUpdated_at(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setReplied_at(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setReplies_count(cursor.getInt(offset + 5));
        entity.setNode_name(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNode_id(cursor.getInt(offset + 7));
        entity.setLast_reply_user_id(cursor.getInt(offset + 8));
        entity.setLast_reply_user_login(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDeleted(cursor.getShort(offset + 10) != 0);
        entity.setExcellent(cursor.getShort(offset + 11) != 0);
        entity.setLikes_count(cursor.getInt(offset + 12));
        entity.setUserId(cursor.getLong(offset + 13));
        entity.setPage(cursor.getInt(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TopicEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TopicEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "topics" to-many relationship of UserEntity. */
    public List<TopicEntity> _queryUserEntity_Topics(long userId) {
        synchronized (this) {
            if (userEntity_TopicsQuery == null) {
                QueryBuilder<TopicEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                userEntity_TopicsQuery = queryBuilder.build();
            }
        }
        Query<TopicEntity> query = userEntity_TopicsQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserEntityDao().getAllColumns());
            builder.append(" FROM TOPIC_ENTITY T");
            builder.append(" LEFT JOIN USER_ENTITY T0 ON T.\"USER_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected TopicEntity loadCurrentDeep(Cursor cursor, boolean lock) {
        TopicEntity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        UserEntity user = loadCurrentOther(daoSession.getUserEntityDao(), cursor, offset);
         if(user != null) {
            entity.setUser(user);
        }

        return entity;    
    }

    public TopicEntity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<TopicEntity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<TopicEntity> list = new ArrayList<TopicEntity>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<TopicEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<TopicEntity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
